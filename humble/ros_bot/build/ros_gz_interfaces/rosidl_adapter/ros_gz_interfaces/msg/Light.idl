// generated from rosidl_adapter/resource/msg.idl.em
// with input from ros_gz_interfaces/msg/Light.msg
// generated code does not contain a copyright notice

#include "geometry_msgs/msg/Pose.idl"
#include "geometry_msgs/msg/Vector3.idl"
#include "std_msgs/msg/ColorRGBA.idl"
#include "std_msgs/msg/Header.idl"

module ros_gz_interfaces {
  module msg {
    module Light_Constants {
      @verbatim (language="comment", text=
        "Light type: constant definition")
      const uint8 POINT = 0;
      const uint8 SPOT = 1;
      const uint8 DIRECTIONAL = 2;
    };
    struct Light {
      @verbatim (language="comment", text=
        "Optional header data")
      std_msgs::msg::Header header;

      @verbatim (language="comment", text=
        "Light name")
      string name;

      @verbatim (language="comment", text=
        "Light type (from constant definitions)")
      uint8 type;

      @verbatim (language="comment", text=
        "Light pose")
      geometry_msgs::msg::Pose pose;

      @verbatim (language="comment", text=
        "Light diffuse emission")
      std_msgs::msg::ColorRGBA diffuse;

      @verbatim (language="comment", text=
        "Light specular emission")
      std_msgs::msg::ColorRGBA specular;

      @verbatim (language="comment", text=
        "Constant variable in attenuation formula")
      float attenuation_constant;

      @verbatim (language="comment", text=
        "Linear variable in attenuation formula")
      float attenuation_linear;

      @verbatim (language="comment", text=
        "Quadratic variable in attenuation formula")
      float attenuation_quadratic;

      @verbatim (language="comment", text=
        "Light direction")
      geometry_msgs::msg::Vector3 direction;

      @verbatim (language="comment", text=
        "Light range")
      float range;

      @verbatim (language="comment", text=
        "Enable/disable shadow casting")
      boolean cast_shadows;

      @verbatim (language="comment", text=
        "Spotlight inner cone angle")
      float spot_inner_angle;

      @verbatim (language="comment", text=
        "Spotlight outer cone angle")
      float spot_outer_angle;

      @verbatim (language="comment", text=
        "Falloff between inner and outer cone")
      float spot_falloff;

      @verbatim (language="comment", text=
        "Unique id of the light")
      uint32 id;

      @verbatim (language="comment", text=
        "Unique id of the light's parent")
      uint32 parent_id;

      @verbatim (language="comment", text=
        "Light intensity")
      float intensity;
    };
  };
};
